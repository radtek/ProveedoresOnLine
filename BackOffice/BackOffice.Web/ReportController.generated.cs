// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace BackOffice.Web.Controllers
{
    public partial class ReportController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ReportController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ReportController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CC_Report_Upsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CC_Report_Upsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CC_ReportInfo_Upsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CC_ReportInfo_Upsert);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ReportController Actions { get { return MVC.Report; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Report";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Report";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Template = "Template";
            public readonly string GeneredReport = "GeneredReport";
            public readonly string CC_Report_Upsert = "CC_Report_Upsert";
            public readonly string CC_ReportInfo_Upsert = "CC_ReportInfo_Upsert";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Template = "Template";
            public const string GeneredReport = "GeneredReport";
            public const string CC_Report_Upsert = "CC_Report_Upsert";
            public const string CC_ReportInfo_Upsert = "CC_ReportInfo_Upsert";
        }


        static readonly ActionParamsClass_CC_Report_Upsert s_params_CC_Report_Upsert = new ActionParamsClass_CC_Report_Upsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CC_Report_Upsert CC_Report_UpsertParams { get { return s_params_CC_Report_Upsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CC_Report_Upsert
        {
            public readonly string ReportId = "ReportId";
        }
        static readonly ActionParamsClass_CC_ReportInfo_Upsert s_params_CC_ReportInfo_Upsert = new ActionParamsClass_CC_ReportInfo_Upsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CC_ReportInfo_Upsert CC_ReportInfo_UpsertParams { get { return s_params_CC_ReportInfo_Upsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CC_ReportInfo_Upsert
        {
            public readonly string ReportInfoId = "ReportInfoId";
            public readonly string ReportInfoFieldId = "ReportInfoFieldId";
            public readonly string ReportInfoEnableId = "ReportInfoEnableId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string GeneredReport = "GeneredReport";
                public readonly string Index = "Index";
                public readonly string Template = "Template";
            }
            public readonly string GeneredReport = "~/Views/Report/GeneredReport.cshtml";
            public readonly string Index = "~/Views/Report/Index.cshtml";
            public readonly string Template = "~/Views/Report/Template.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ReportController : BackOffice.Web.Controllers.ReportController
    {
        public T4MVC_ReportController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void TemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Template()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Template);
            TemplateOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GeneredReportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GeneredReport()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneredReport);
            GeneredReportOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CC_Report_UpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ReportId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CC_Report_Upsert(string ReportId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CC_Report_Upsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReportId", ReportId);
            CC_Report_UpsertOverride(callInfo, ReportId);
            return callInfo;
        }

        [NonAction]
        partial void CC_ReportInfo_UpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ReportInfoId, string ReportInfoFieldId, string ReportInfoEnableId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CC_ReportInfo_Upsert(string ReportInfoId, string ReportInfoFieldId, string ReportInfoEnableId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CC_ReportInfo_Upsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReportInfoId", ReportInfoId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReportInfoFieldId", ReportInfoFieldId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReportInfoEnableId", ReportInfoEnableId);
            CC_ReportInfo_UpsertOverride(callInfo, ReportInfoId, ReportInfoFieldId, ReportInfoEnableId);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
